{
  "projectId": 1,
  "version": "1.0.0",
  "commitHash": "abc123",
  "entities": {
    "nodes": [
      {
        "msName": "ts-common",
        "nodeName": "Account",
        "nodeFullName": "Account",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "AdminTrip",
        "nodeFullName": "AdminTrip",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Assurance",
        "nodeFullName": "Assurance",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "AssuranceType",
        "nodeFullName": "AssuranceType",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Config",
        "nodeFullName": "Config",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Consign",
        "nodeFullName": "Consign",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Contacts",
        "nodeFullName": "Contacts",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "DocumentType",
        "nodeFullName": "DocumentType",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Food",
        "nodeFullName": "Food",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "FoodOrder",
        "nodeFullName": "FoodOrder",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Gender",
        "nodeFullName": "Gender",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "LeftTicketInfo",
        "nodeFullName": "LeftTicketInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "NotifyInfo",
        "nodeFullName": "NotifyInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Order",
        "nodeFullName": "Order",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "OrderAlterInfo",
        "nodeFullName": "OrderAlterInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "OrderSecurity",
        "nodeFullName": "OrderSecurity",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "OrderStatus",
        "nodeFullName": "OrderStatus",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "OrderTicketsInfo",
        "nodeFullName": "OrderTicketsInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "PaymentDifferenceInfo",
        "nodeFullName": "PaymentDifferenceInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "PriceConfig",
        "nodeFullName": "PriceConfig",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Route",
        "nodeFullName": "Route",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "RouteInfo",
        "nodeFullName": "RouteInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "RoutePlanInfo",
        "nodeFullName": "RoutePlanInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "RoutePlanResultUnit",
        "nodeFullName": "RoutePlanResultUnit",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Seat",
        "nodeFullName": "Seat",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "SeatClass",
        "nodeFullName": "SeatClass",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "SoldTicket",
        "nodeFullName": "SoldTicket",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Station",
        "nodeFullName": "Station",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "StationFoodStore",
        "nodeFullName": "StationFoodStore",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Ticket",
        "nodeFullName": "Ticket",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "TrainFood",
        "nodeFullName": "TrainFood",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "TrainType",
        "nodeFullName": "TrainType",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Travel",
        "nodeFullName": "Travel",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "TravelInfo",
        "nodeFullName": "TravelInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "TravelResult",
        "nodeFullName": "TravelResult",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Trip",
        "nodeFullName": "Trip",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "TripAllDetail",
        "nodeFullName": "TripAllDetail",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "TripAllDetailInfo",
        "nodeFullName": "TripAllDetailInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "TripId",
        "nodeFullName": "TripId",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "TripInfo",
        "nodeFullName": "TripInfo",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "TripResponse",
        "nodeFullName": "TripResponse",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "Type",
        "nodeFullName": "Type",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "User",
        "nodeFullName": "User",
        "fields": [
        ]
      },
      {
        "msName": "ts-common",
        "nodeName": "VerifyResult",
        "nodeFullName": "VerifyResult",
        "fields": [
        ]
      },
      {
        "msName": "ts-admin-basic-info-service",
        "nodeName": "PriceInfo",
        "nodeFullName": "PriceInfo",
        "fields": [
          {
            "fieldName": "basicPriceRate",
            "fieldFullName": "basicPriceRate",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "trainType",
            "fieldFullName": "trainType",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "routeId",
            "fieldFullName": "routeId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "firstClassPriceRate",
            "fieldFullName": "firstClassPriceRate",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-admin-user-service",
        "nodeName": "UserDto",
        "nodeFullName": "UserDto",
        "fields": [
          {
            "fieldName": "documentType",
            "fieldFullName": "documentType",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "password",
            "fieldFullName": "password",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "documentNum",
            "fieldFullName": "documentNum",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "gender",
            "fieldFullName": "gender",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "email",
            "fieldFullName": "email",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userName",
            "fieldFullName": "userName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-assurance-service",
        "nodeName": "AssuranceType",
        "nodeFullName": "AssuranceType",
        "fields": [
          {
            "fieldName": "name",
            "fieldFullName": "name",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "index",
            "fieldFullName": "index",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-assurance-service",
        "nodeName": "Assurance",
        "nodeFullName": "Assurance",
        "fields": [
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "type",
            "fieldFullName": "type",
            "fieldType": "AssuranceType",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              },
              {
                "annotation": "@Enumerated"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "AssuranceType",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-assurance-service",
        "nodeName": "PlainAssurance",
        "nodeFullName": "PlainAssurance",
        "fields": [
          {
            "fieldName": "typePrice",
            "fieldFullName": "typePrice",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "typeIndex",
            "fieldFullName": "typeIndex",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "typeName",
            "fieldFullName": "typeName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-assurance-service",
        "nodeName": "AssuranceTypeBean",
        "nodeFullName": "AssuranceTypeBean",
        "fields": [
          {
            "fieldName": "name",
            "fieldFullName": "name",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "index",
            "fieldFullName": "index",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-auth-service",
        "nodeName": "User",
        "nodeFullName": "User",
        "fields": [
          {
            "fieldName": "password",
            "fieldFullName": "password",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "roles",
            "fieldFullName": "roles",
            "fieldType": "Set<String>",
            "fieldAnnotations": [
              {
                "annotation": "@ElementCollection"
              },
              {
                "annotation": "@CollectionTable"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Set<String>",
            "isCollection": true
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "username",
            "fieldFullName": "username",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-auth-service",
        "nodeName": "TokenDto",
        "nodeFullName": "TokenDto",
        "fields": [
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "username",
            "fieldFullName": "username",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "token",
            "fieldFullName": "token",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-auth-service",
        "nodeName": "BasicAuthDto",
        "nodeFullName": "BasicAuthDto",
        "fields": [
          {
            "fieldName": "password",
            "fieldFullName": "password",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "verificationCode",
            "fieldFullName": "verificationCode",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "username",
            "fieldFullName": "username",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-auth-service",
        "nodeName": "AuthDto",
        "nodeFullName": "AuthDto",
        "fields": [
          {
            "fieldName": "password",
            "fieldFullName": "password",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userName",
            "fieldFullName": "userName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-cancel-service",
        "nodeName": "GetOrderByIdInfo",
        "nodeFullName": "GetOrderByIdInfo",
        "fields": [
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-cancel-service",
        "nodeName": "GetAccountByIdResult",
        "nodeFullName": "GetAccountByIdResult",
        "fields": [
          {
            "fieldName": "message",
            "fieldFullName": "message",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "status",
            "fieldFullName": "status",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "account",
            "fieldFullName": "account",
            "fieldType": "Account",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Account",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-cancel-service",
        "nodeName": "GetAccountByIdInfo",
        "nodeFullName": "GetAccountByIdInfo",
        "fields": [
          {
            "fieldName": "accountId",
            "fieldFullName": "accountId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-config-service",
        "nodeName": "Config",
        "nodeFullName": "Config",
        "fields": [
          {
            "fieldName": "description",
            "fieldFullName": "description",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "name",
            "fieldFullName": "name",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "value",
            "fieldFullName": "value",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-consign-price-service",
        "nodeName": "ConsignPrice",
        "nodeFullName": "ConsignPrice",
        "fields": [
          {
            "fieldName": "initialPrice",
            "fieldFullName": "initialPrice",
            "fieldType": "double",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "withinPrice",
            "fieldFullName": "withinPrice",
            "fieldType": "double",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "beyondPrice",
            "fieldFullName": "beyondPrice",
            "fieldType": "double",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "index",
            "fieldFullName": "index",
            "fieldType": "int",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "initialWeight",
            "fieldFullName": "initialWeight",
            "fieldType": "double",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-consign-service",
        "nodeName": "ConsignRecord",
        "nodeFullName": "ConsignRecord",
        "fields": [
          {
            "fieldName": "accountId",
            "fieldFullName": "accountId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "phone",
            "fieldFullName": "phone",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "handleDate",
            "fieldFullName": "handleDate",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "consignee",
            "fieldFullName": "consignee",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "weight",
            "fieldFullName": "weight",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "targetDate",
            "fieldFullName": "targetDate",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "double",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "from",
            "fieldFullName": "from",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "to",
            "fieldFullName": "to",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-consign-service",
        "nodeName": "InsertConsignRecordResult",
        "nodeFullName": "InsertConsignRecordResult",
        "fields": [
          {
            "fieldName": "message",
            "fieldFullName": "message",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "status",
            "fieldFullName": "status",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-consign-service",
        "nodeName": "Consign",
        "nodeFullName": "Consign",
        "fields": [
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-contacts-service",
        "nodeName": "Contacts",
        "nodeFullName": "Contacts",
        "fields": [
          {
            "fieldName": "accountId",
            "fieldFullName": "accountId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "name",
            "fieldFullName": "name",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "phoneNumber",
            "fieldFullName": "phoneNumber",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "documentType",
            "fieldFullName": "documentType",
            "fieldType": "int",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "documentNumber",
            "fieldFullName": "documentNumber",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-delivery-service",
        "nodeName": "Delivery",
        "nodeFullName": "Delivery",
        "fields": [
          {
            "fieldName": "storeName",
            "fieldFullName": "storeName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "UUID",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "UUID",
            "isCollection": false
          },
          {
            "fieldName": "stationName",
            "fieldFullName": "stationName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "foodName",
            "fieldFullName": "foodName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-food-delivery-service",
        "nodeName": "StationFoodStoreInfo",
        "nodeFullName": "StationFoodStoreInfo",
        "fields": [
          {
            "fieldName": "foodList",
            "fieldFullName": "foodList",
            "fieldType": "List<Food>",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<Food>",
            "isCollection": true
          },
          {
            "fieldName": "storeName",
            "fieldFullName": "storeName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "businessTime",
            "fieldFullName": "businessTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "stationId",
            "fieldFullName": "stationId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "telephone",
            "fieldFullName": "telephone",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "deliveryFee",
            "fieldFullName": "deliveryFee",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-food-delivery-service",
        "nodeName": "SeatInfo",
        "nodeFullName": "SeatInfo",
        "fields": [
          {
            "fieldName": "seatNo",
            "fieldFullName": "seatNo",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-food-delivery-service",
        "nodeName": "TripOrderInfo",
        "nodeFullName": "TripOrderInfo",
        "fields": [
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "tripId",
            "fieldFullName": "tripId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-food-delivery-service",
        "nodeName": "FoodDeliveryOrder",
        "nodeFullName": "FoodDeliveryOrder",
        "fields": [
          {
            "fieldName": "createdTime",
            "fieldFullName": "createdTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "seatNo",
            "fieldFullName": "seatNo",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "stationFoodStoreId",
            "fieldFullName": "stationFoodStoreId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "deliveryTime",
            "fieldFullName": "deliveryTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "foodList",
            "fieldFullName": "foodList",
            "fieldType": "List<Food>",
            "fieldAnnotations": [
              {
                "annotation": "@ElementCollection"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<Food>",
            "isCollection": true
          },
          {
            "fieldName": "tripId",
            "fieldFullName": "tripId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "deliveryFee",
            "fieldFullName": "deliveryFee",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-food-delivery-service",
        "nodeName": "DeliveryInfo",
        "nodeFullName": "DeliveryInfo",
        "fields": [
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "deliveryTime",
            "fieldFullName": "deliveryTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-food-service",
        "nodeName": "Delivery",
        "nodeFullName": "Delivery",
        "fields": [
          {
            "fieldName": "storeName",
            "fieldFullName": "storeName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "UUID",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "UUID",
            "isCollection": false
          },
          {
            "fieldName": "stationName",
            "fieldFullName": "stationName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "foodName",
            "fieldFullName": "foodName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-food-service",
        "nodeName": "FoodOrder",
        "nodeFullName": "FoodOrder",
        "fields": [
          {
            "fieldName": "storeName",
            "fieldFullName": "storeName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "stationName",
            "fieldFullName": "stationName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "foodName",
            "fieldFullName": "foodName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "foodType",
            "fieldFullName": "foodType",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-food-service",
        "nodeName": "AllTripFood",
        "nodeFullName": "AllTripFood",
        "fields": [
          {
            "fieldName": "foodStoreListMap",
            "fieldFullName": "foodStoreListMap",
            "fieldType": "Map<String,StationFoodStore>>",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Map<String,StationFoodStore>>",
            "isCollection": true
          },
          {
            "fieldName": "trainFoodList",
            "fieldFullName": "trainFoodList",
            "fieldType": "List<Food>",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<Food>",
            "isCollection": true
          }
        ]
      },
      {
        "msName": "ts-inside-payment-service",
        "nodeName": "Payment",
        "nodeFullName": "Payment",
        "fields": [
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "type",
            "fieldFullName": "type",
            "fieldType": "PaymentType",
            "fieldAnnotations": [
              {
                "annotation": "@Enumerated"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "PaymentType",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-inside-payment-service",
        "nodeName": "Balance",
        "nodeFullName": "Balance",
        "fields": [
          {
            "fieldName": "balance",
            "fieldFullName": "balance",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-inside-payment-service",
        "nodeName": "Money",
        "nodeFullName": "Money",
        "fields": [
          {
            "fieldName": "money",
            "fieldFullName": "money",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "type",
            "fieldFullName": "type",
            "fieldType": "MoneyType",
            "fieldAnnotations": [
              {
                "annotation": "@Enumerated"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "MoneyType",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-inside-payment-service",
        "nodeName": "PaymentInfo",
        "nodeFullName": "PaymentInfo",
        "fields": [
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "tripId",
            "fieldFullName": "tripId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-inside-payment-service",
        "nodeName": "PaymentType",
        "nodeFullName": "PaymentType",
        "fields": [
          {
            "fieldName": "name",
            "fieldFullName": "name",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "index",
            "fieldFullName": "index",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-inside-payment-service",
        "nodeName": "MoneyType",
        "nodeFullName": "MoneyType",
        "fields": [
          {
            "fieldName": "name",
            "fieldFullName": "name",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "index",
            "fieldFullName": "index",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-inside-payment-service",
        "nodeName": "OutsidePaymentInfo",
        "nodeFullName": "OutsidePaymentInfo",
        "fields": [
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-inside-payment-service",
        "nodeName": "AccountInfo",
        "nodeFullName": "AccountInfo",
        "fields": [
          {
            "fieldName": "money",
            "fieldFullName": "money",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-notification-service",
        "nodeName": "EmailProperties",
        "nodeFullName": "EmailProperties",
        "fields": [
          {
            "fieldName": "password",
            "fieldFullName": "password",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "port",
            "fieldFullName": "port",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "host",
            "fieldFullName": "host",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "username",
            "fieldFullName": "username",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-notification-service",
        "nodeName": "NotifyInfo",
        "nodeFullName": "NotifyInfo",
        "fields": [
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderNumber",
            "fieldFullName": "orderNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startTime",
            "fieldFullName": "startTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "seatNumber",
            "fieldFullName": "seatNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "date",
            "fieldFullName": "date",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "sendStatus",
            "fieldFullName": "sendStatus",
            "fieldType": "Boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Boolean",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "email",
            "fieldFullName": "email",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "seatClass",
            "fieldFullName": "seatClass",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startPlace",
            "fieldFullName": "startPlace",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "endPlace",
            "fieldFullName": "endPlace",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "username",
            "fieldFullName": "username",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-notification-service",
        "nodeName": "Mail",
        "nodeFullName": "Mail",
        "fields": [
          {
            "fieldName": "mailFrom",
            "fieldFullName": "mailFrom",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "mailSubject",
            "fieldFullName": "mailSubject",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "mailContent",
            "fieldFullName": "mailContent",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "mailCc",
            "fieldFullName": "mailCc",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "attachments",
            "fieldFullName": "attachments",
            "fieldType": "List<Object>",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<Object>",
            "isCollection": true
          },
          {
            "fieldName": "contentType",
            "fieldFullName": "contentType",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "mailTo",
            "fieldFullName": "mailTo",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "model",
            "fieldFullName": "model",
            "fieldType": "Map<String,Object>",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Map<String,Object>",
            "isCollection": true
          },
          {
            "fieldName": "mailBcc",
            "fieldFullName": "mailBcc",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-order-other-service",
        "nodeName": "OrderAlterInfo",
        "nodeFullName": "OrderAlterInfo",
        "fields": [
          {
            "fieldName": "loginToken",
            "fieldFullName": "loginToken",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "previousOrderId",
            "fieldFullName": "previousOrderId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "accountId",
            "fieldFullName": "accountId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "newOrderInfo",
            "fieldFullName": "newOrderInfo",
            "fieldType": "Order",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Order",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-order-other-service",
        "nodeName": "QueryInfo",
        "nodeFullName": "QueryInfo",
        "fields": [
          {
            "fieldName": "travelDateStart",
            "fieldFullName": "travelDateStart",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "boughtDateEnd",
            "fieldFullName": "boughtDateEnd",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "enableBoughtDateQuery",
            "fieldFullName": "enableBoughtDateQuery",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "travelDateEnd",
            "fieldFullName": "travelDateEnd",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "loginId",
            "fieldFullName": "loginId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "state",
            "fieldFullName": "state",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "enableTravelDateQuery",
            "fieldFullName": "enableTravelDateQuery",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "boughtDateStart",
            "fieldFullName": "boughtDateStart",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "enableStateQuery",
            "fieldFullName": "enableStateQuery",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-order-other-service",
        "nodeName": "Order",
        "nodeFullName": "Order",
        "fields": [
          {
            "fieldName": "contactsDocumentNumber",
            "fieldFullName": "contactsDocumentNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "trainNumber",
            "fieldFullName": "trainNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "seatNumber",
            "fieldFullName": "seatNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "contactsName",
            "fieldFullName": "contactsName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "travelTime",
            "fieldFullName": "travelTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "to",
            "fieldFullName": "to",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "accountId",
            "fieldFullName": "accountId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "travelDate",
            "fieldFullName": "travelDate",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "documentType",
            "fieldFullName": "documentType",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "seatClass",
            "fieldFullName": "seatClass",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "boughtDate",
            "fieldFullName": "boughtDate",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "coachNumber",
            "fieldFullName": "coachNumber",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "status",
            "fieldFullName": "status",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "from",
            "fieldFullName": "from",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-order-service",
        "nodeName": "OrderAlterInfo",
        "nodeFullName": "OrderAlterInfo",
        "fields": [
          {
            "fieldName": "loginToken",
            "fieldFullName": "loginToken",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "previousOrderId",
            "fieldFullName": "previousOrderId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "accountId",
            "fieldFullName": "accountId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "newOrderInfo",
            "fieldFullName": "newOrderInfo",
            "fieldType": "Order",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Order",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-order-service",
        "nodeName": "OrderInfo",
        "nodeFullName": "OrderInfo",
        "fields": [
          {
            "fieldName": "travelDateStart",
            "fieldFullName": "travelDateStart",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "boughtDateEnd",
            "fieldFullName": "boughtDateEnd",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "enableBoughtDateQuery",
            "fieldFullName": "enableBoughtDateQuery",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "travelDateEnd",
            "fieldFullName": "travelDateEnd",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "loginId",
            "fieldFullName": "loginId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "state",
            "fieldFullName": "state",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "enableTravelDateQuery",
            "fieldFullName": "enableTravelDateQuery",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "boughtDateStart",
            "fieldFullName": "boughtDateStart",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "enableStateQuery",
            "fieldFullName": "enableStateQuery",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-order-service",
        "nodeName": "Order",
        "nodeFullName": "Order",
        "fields": [
          {
            "fieldName": "contactsDocumentNumber",
            "fieldFullName": "contactsDocumentNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "trainNumber",
            "fieldFullName": "trainNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "seatNumber",
            "fieldFullName": "seatNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "contactsName",
            "fieldFullName": "contactsName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "travelTime",
            "fieldFullName": "travelTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "to",
            "fieldFullName": "to",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "accountId",
            "fieldFullName": "accountId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "travelDate",
            "fieldFullName": "travelDate",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "documentType",
            "fieldFullName": "documentType",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "seatClass",
            "fieldFullName": "seatClass",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "boughtDate",
            "fieldFullName": "boughtDate",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "coachNumber",
            "fieldFullName": "coachNumber",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "status",
            "fieldFullName": "status",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "from",
            "fieldFullName": "from",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-payment-service",
        "nodeName": "Payment",
        "nodeFullName": "Payment",
        "fields": [
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-payment-service",
        "nodeName": "Money",
        "nodeFullName": "Money",
        "fields": [
          {
            "fieldName": "money",
            "fieldFullName": "money",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-price-service",
        "nodeName": "PriceConfig",
        "nodeFullName": "PriceConfig",
        "fields": [
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "routeId",
            "fieldFullName": "routeId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "basicPriceRate",
            "fieldFullName": "basicPriceRate",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "trainType",
            "fieldFullName": "trainType",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "firstClassPriceRate",
            "fieldFullName": "firstClassPriceRate",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-rebook-service",
        "nodeName": "RebookInfo",
        "nodeFullName": "RebookInfo",
        "fields": [
          {
            "fieldName": "oldTripId",
            "fieldFullName": "oldTripId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "date",
            "fieldFullName": "date",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "seatType",
            "fieldFullName": "seatType",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "loginId",
            "fieldFullName": "loginId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "orderId",
            "fieldFullName": "orderId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "tripId",
            "fieldFullName": "tripId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-rebook-service",
        "nodeName": "VerifyResult",
        "nodeFullName": "VerifyResult",
        "fields": [
          {
            "fieldName": "message",
            "fieldFullName": "message",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "status",
            "fieldFullName": "status",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-route-service",
        "nodeName": "RouteInfo",
        "nodeFullName": "RouteInfo",
        "fields": [
          {
            "fieldName": "distanceList",
            "fieldFullName": "distanceList",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startStation",
            "fieldFullName": "startStation",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "endStation",
            "fieldFullName": "endStation",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "stationList",
            "fieldFullName": "stationList",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "Id",
            "fieldFullName": "Id",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-route-service",
        "nodeName": "Route",
        "nodeFullName": "Route",
        "fields": [
          {
            "fieldName": "startStation",
            "fieldFullName": "startStation",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "distances",
            "fieldFullName": "distances",
            "fieldType": "List<Integer>",
            "fieldAnnotations": [
              {
                "annotation": "@ElementCollection"
              },
              {
                "annotation": "@OrderColumn"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<Integer>",
            "isCollection": true
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "endStation",
            "fieldFullName": "endStation",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "stations",
            "fieldFullName": "stations",
            "fieldType": "List<String>",
            "fieldAnnotations": [
              {
                "annotation": "@ElementCollection"
              },
              {
                "annotation": "@OrderColumn"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<String>",
            "isCollection": true
          }
        ]
      },
      {
        "msName": "ts-security-service",
        "nodeName": "SecurityConfig",
        "nodeFullName": "SecurityConfig",
        "fields": [
          {
            "fieldName": "description",
            "fieldFullName": "description",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "name",
            "fieldFullName": "name",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "value",
            "fieldFullName": "value",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-station-food-service",
        "nodeName": "StationFoodStore",
        "nodeFullName": "StationFoodStore",
        "fields": [
          {
            "fieldName": "storeName",
            "fieldFullName": "storeName",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "businessTime",
            "fieldFullName": "businessTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "stationName",
            "fieldFullName": "stationName",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "telephone",
            "fieldFullName": "telephone",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "foodList",
            "fieldFullName": "foodList",
            "fieldType": "List<Food>",
            "fieldAnnotations": [
              {
                "annotation": "@ElementCollection"
              },
              {
                "annotation": "@CollectionTable"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<Food>",
            "isCollection": true
          },
          {
            "fieldName": "deliveryFee",
            "fieldFullName": "deliveryFee",
            "fieldType": "double",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-station-service",
        "nodeName": "Station",
        "nodeFullName": "Station",
        "fields": [
          {
            "fieldName": "name",
            "fieldFullName": "name",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "stayTime",
            "fieldFullName": "stayTime",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-train-food-service",
        "nodeName": "TrainFood",
        "nodeFullName": "TrainFood",
        "fields": [
          {
            "fieldName": "tripId",
            "fieldFullName": "tripId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "foodList",
            "fieldFullName": "foodList",
            "fieldType": "List<Food>",
            "fieldAnnotations": [
              {
                "annotation": "@ElementCollection"
              },
              {
                "annotation": "@CollectionTable"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<Food>",
            "isCollection": true
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-train-service",
        "nodeName": "TrainType",
        "nodeFullName": "TrainType",
        "fields": [
          {
            "fieldName": "name",
            "fieldFullName": "name",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "averageSpeed",
            "fieldFullName": "averageSpeed",
            "fieldType": "int",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "confortClass",
            "fieldFullName": "confortClass",
            "fieldType": "int",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "economyClass",
            "fieldFullName": "economyClass",
            "fieldType": "int",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel-plan-service",
        "nodeName": "TransferTravelResult",
        "nodeFullName": "TransferTravelResult",
        "fields": [
          {
            "fieldName": "secondSectionResult",
            "fieldFullName": "secondSectionResult",
            "fieldType": "List<TripResponse>",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<TripResponse>",
            "isCollection": true
          },
          {
            "fieldName": "firstSectionResult",
            "fieldFullName": "firstSectionResult",
            "fieldType": "List<TripResponse>",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<TripResponse>",
            "isCollection": true
          }
        ]
      },
      {
        "msName": "ts-travel-plan-service",
        "nodeName": "TransferTravelInfo",
        "nodeFullName": "TransferTravelInfo",
        "fields": [
          {
            "fieldName": "travelDate",
            "fieldFullName": "travelDate",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startStation",
            "fieldFullName": "startStation",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "viaStation",
            "fieldFullName": "viaStation",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "endStation",
            "fieldFullName": "endStation",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "trainType",
            "fieldFullName": "trainType",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel-plan-service",
        "nodeName": "TravelAdvanceResultUnit",
        "nodeFullName": "TravelAdvanceResultUnit",
        "fields": [
          {
            "fieldName": "priceForFirstClassSeat",
            "fieldFullName": "priceForFirstClassSeat",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startStation",
            "fieldFullName": "startStation",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "stopStations",
            "fieldFullName": "stopStations",
            "fieldType": "List<String>",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "List<String>",
            "isCollection": true
          },
          {
            "fieldName": "numberOfRestTicketSecondClass",
            "fieldFullName": "numberOfRestTicketSecondClass",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "priceForSecondClassSeat",
            "fieldFullName": "priceForSecondClassSeat",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startTime",
            "fieldFullName": "startTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "numberOfRestTicketFirstClass",
            "fieldFullName": "numberOfRestTicketFirstClass",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "endStation",
            "fieldFullName": "endStation",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "trainTypeId",
            "fieldFullName": "trainTypeId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "tripId",
            "fieldFullName": "tripId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "endTime",
            "fieldFullName": "endTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel-service",
        "nodeName": "AdminTrip",
        "nodeFullName": "AdminTrip",
        "fields": [
          {
            "fieldName": "route",
            "fieldFullName": "route",
            "fieldType": "Route",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Route",
            "isCollection": false
          },
          {
            "fieldName": "trainType",
            "fieldFullName": "trainType",
            "fieldType": "TrainType",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "TrainType",
            "isCollection": false
          },
          {
            "fieldName": "trip",
            "fieldFullName": "trip",
            "fieldType": "Trip",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Trip",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel-service",
        "nodeName": "Travel",
        "nodeFullName": "Travel",
        "fields": [
          {
            "fieldName": "trip",
            "fieldFullName": "trip",
            "fieldType": "Trip",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Trip",
            "isCollection": false
          },
          {
            "fieldName": "departureTime",
            "fieldFullName": "departureTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startPlace",
            "fieldFullName": "startPlace",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "endPlace",
            "fieldFullName": "endPlace",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel-service",
        "nodeName": "Trip",
        "nodeFullName": "Trip",
        "fields": [
          {
            "fieldName": "tripId",
            "fieldFullName": "tripId",
            "fieldType": "TripId",
            "fieldAnnotations": [
              {
                "annotation": "@Embedded"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "TripId",
            "isCollection": false
          },
          {
            "fieldName": "terminalStationName",
            "fieldFullName": "terminalStationName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startTime",
            "fieldFullName": "startTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "trainTypeName",
            "fieldFullName": "trainTypeName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startStationName",
            "fieldFullName": "startStationName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "routeId",
            "fieldFullName": "routeId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "stationsName",
            "fieldFullName": "stationsName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "endTime",
            "fieldFullName": "endTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel-service",
        "nodeName": "TripAllDetail",
        "nodeFullName": "TripAllDetail",
        "fields": [
          {
            "fieldName": "tripResponse",
            "fieldFullName": "tripResponse",
            "fieldType": "TripResponse",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "TripResponse",
            "isCollection": false
          },
          {
            "fieldName": "trip",
            "fieldFullName": "trip",
            "fieldType": "Trip",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Trip",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel2-service",
        "nodeName": "AdminTrip",
        "nodeFullName": "AdminTrip",
        "fields": [
          {
            "fieldName": "route",
            "fieldFullName": "route",
            "fieldType": "Route",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Route",
            "isCollection": false
          },
          {
            "fieldName": "trainType",
            "fieldFullName": "trainType",
            "fieldType": "TrainType",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "TrainType",
            "isCollection": false
          },
          {
            "fieldName": "trip",
            "fieldFullName": "trip",
            "fieldType": "Trip",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Trip",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel2-service",
        "nodeName": "Travel",
        "nodeFullName": "Travel",
        "fields": [
          {
            "fieldName": "trip",
            "fieldFullName": "trip",
            "fieldType": "Trip",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Trip",
            "isCollection": false
          },
          {
            "fieldName": "departureTime",
            "fieldFullName": "departureTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startPlace",
            "fieldFullName": "startPlace",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "endPlace",
            "fieldFullName": "endPlace",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel2-service",
        "nodeName": "Trip",
        "nodeFullName": "Trip",
        "fields": [
          {
            "fieldName": "tripId",
            "fieldFullName": "tripId",
            "fieldType": "TripId",
            "fieldAnnotations": [
              {
                "annotation": "@Embedded"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "TripId",
            "isCollection": false
          },
          {
            "fieldName": "terminalStationName",
            "fieldFullName": "terminalStationName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startTime",
            "fieldFullName": "startTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "trainTypeName",
            "fieldFullName": "trainTypeName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "startStationName",
            "fieldFullName": "startStationName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "routeId",
            "fieldFullName": "routeId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "stationsName",
            "fieldFullName": "stationsName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "endTime",
            "fieldFullName": "endTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-travel2-service",
        "nodeName": "TripAllDetail",
        "nodeFullName": "TripAllDetail",
        "fields": [
          {
            "fieldName": "tripResponse",
            "fieldFullName": "tripResponse",
            "fieldType": "TripResponse",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "TripResponse",
            "isCollection": false
          },
          {
            "fieldName": "message",
            "fieldFullName": "message",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "trip",
            "fieldFullName": "trip",
            "fieldType": "Trip",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "Trip",
            "isCollection": false
          },
          {
            "fieldName": "status",
            "fieldFullName": "status",
            "fieldType": "boolean",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-user-service",
        "nodeName": "UserDto",
        "nodeFullName": "UserDto",
        "fields": [
          {
            "fieldName": "documentType",
            "fieldFullName": "documentType",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "password",
            "fieldFullName": "password",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "documentNum",
            "fieldFullName": "documentNum",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "gender",
            "fieldFullName": "gender",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "email",
            "fieldFullName": "email",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userName",
            "fieldFullName": "userName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-user-service",
        "nodeName": "User",
        "nodeFullName": "User",
        "fields": [
          {
            "fieldName": "documentNum",
            "fieldFullName": "documentNum",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "password",
            "fieldFullName": "password",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "gender",
            "fieldFullName": "gender",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "email",
            "fieldFullName": "email",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userName",
            "fieldFullName": "userName",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "documentType",
            "fieldFullName": "documentType",
            "fieldType": "int",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-user-service",
        "nodeName": "AuthDto",
        "nodeFullName": "AuthDto",
        "fields": [
          {
            "fieldName": "password",
            "fieldFullName": "password",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userId",
            "fieldFullName": "userId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "userName",
            "fieldFullName": "userName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-wait-order-service",
        "nodeName": "WaitListOrderVO",
        "nodeFullName": "WaitListOrderVO",
        "fields": [
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "contactsId",
            "fieldFullName": "contactsId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "date",
            "fieldFullName": "date",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "seatType",
            "fieldFullName": "seatType",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "to",
            "fieldFullName": "to",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "accountId",
            "fieldFullName": "accountId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "tripId",
            "fieldFullName": "tripId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "from",
            "fieldFullName": "from",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      },
      {
        "msName": "ts-wait-order-service",
        "nodeName": "WaitListOrder",
        "nodeFullName": "WaitListOrder",
        "fields": [
          {
            "fieldName": "contactsDocumentNumber",
            "fieldFullName": "contactsDocumentNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "createdTime",
            "fieldFullName": "createdTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "trainNumber",
            "fieldFullName": "trainNumber",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "waitUtilTime",
            "fieldFullName": "waitUtilTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "contactsName",
            "fieldFullName": "contactsName",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "seatType",
            "fieldFullName": "seatType",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "travelTime",
            "fieldFullName": "travelTime",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "id",
            "fieldFullName": "id",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Id"
              },
              {
                "annotation": "@GeneratedValue"
              },
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "to",
            "fieldFullName": "to",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "accountId",
            "fieldFullName": "accountId",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "price",
            "fieldFullName": "price",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "contactsId",
            "fieldFullName": "contactsId",
            "fieldType": "String",
            "fieldAnnotations": [
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          },
          {
            "fieldName": "contactsDocumentType",
            "fieldFullName": "contactsDocumentType",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "status",
            "fieldFullName": "status",
            "fieldType": "int",
            "fieldAnnotations": [
            ],
            "fieldIsReference": false,
            "fieldEntityRefName": "null",
            "isCollection": false
          },
          {
            "fieldName": "from",
            "fieldFullName": "from",
            "fieldType": "String",
            "fieldAnnotations": [
              {
                "annotation": "@Column"
              }
            ],
            "fieldIsReference": true,
            "fieldEntityRefName": "String",
            "isCollection": false
          }
        ]
      }
    ],
    "links": [
      {
        "source": "StationFoodStoreInfo",
        "target": "Food",
        "msSource": "ts-food-delivery-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "0..*",
        "targetMultiplicity": "0"
      },
      {
        "source": "TripAllDetail",
        "target": "TripResponse",
        "msSource": "ts-travel2-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "2",
        "targetMultiplicity": "0"
      },
      {
        "source": "Money",
        "target": "MoneyType",
        "msSource": "ts-inside-payment-service",
        "msTarget": "ts-inside-payment-service",
        "sourceMultiplicity": "1",
        "targetMultiplicity": "0"
      },
      {
        "source": "AdminTrip",
        "target": "TrainType",
        "msSource": "ts-travel2-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "2",
        "targetMultiplicity": "0"
      },
      {
        "source": "Trip",
        "target": "TripId",
        "msSource": "ts-travel2-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "2",
        "targetMultiplicity": "0"
      },
      {
        "source": "TrainFood",
        "target": "Food",
        "msSource": "ts-train-food-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "0..*",
        "targetMultiplicity": "0"
      },
      {
        "source": "AllTripFood",
        "target": "Food",
        "msSource": "ts-food-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "0..*",
        "targetMultiplicity": "0"
      },
      {
        "source": "TransferTravelResult",
        "target": "TripResponse",
        "msSource": "ts-travel-plan-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "0..*",
        "targetMultiplicity": "0"
      },
      {
        "source": "AdminTrip",
        "target": "Route",
        "msSource": "ts-travel2-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "2",
        "targetMultiplicity": "0"
      },
      {
        "source": "GetAccountByIdResult",
        "target": "Account",
        "msSource": "ts-cancel-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "1",
        "targetMultiplicity": "0"
      },
      {
        "source": "StationFoodStore",
        "target": "Food",
        "msSource": "ts-station-food-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "0..*",
        "targetMultiplicity": "0"
      },
      {
        "source": "Assurance",
        "target": "AssuranceType",
        "msSource": "ts-assurance-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "1",
        "targetMultiplicity": "0"
      },
      {
        "source": "FoodDeliveryOrder",
        "target": "Food",
        "msSource": "ts-food-delivery-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "0..*",
        "targetMultiplicity": "0"
      },
      {
        "source": "OrderAlterInfo",
        "target": "Order",
        "msSource": "ts-order-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "2",
        "targetMultiplicity": "0"
      },
      {
        "source": "TripAllDetail",
        "target": "Trip",
        "msSource": "ts-travel2-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "2",
        "targetMultiplicity": "0"
      },
      {
        "source": "AdminTrip",
        "target": "Trip",
        "msSource": "ts-travel2-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "2",
        "targetMultiplicity": "0"
      },
      {
        "source": "Travel",
        "target": "Trip",
        "msSource": "ts-travel2-service",
        "msTarget": "ts-common",
        "sourceMultiplicity": "2",
        "targetMultiplicity": "0"
      },
      {
        "source": "Payment",
        "target": "PaymentType",
        "msSource": "ts-inside-payment-service",
        "msTarget": "ts-inside-payment-service",
        "sourceMultiplicity": "1",
        "targetMultiplicity": "0"
      }
    ]
  },
  "graph": {
    "nodes": [
      {
        "nodeName": "ts-admin-user-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-consign-price-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-consign-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-train-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-route-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-admin-route-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-price-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-assurance-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-order-other-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-verification-code-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-user-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-admin-basic-info-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-route-plan-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-gateway-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-food-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-preserve-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-payment-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-seat-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-travel-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-cancel-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-station-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-admin-order-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-security-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-wait-order-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-order-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-rebook-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-train-food-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-auth-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-travel-plan-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-preserve-other-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-inside-payment-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-basic-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-delivery-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-execute-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-station-food-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-admin-travel-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-food-delivery-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-travel2-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-notification-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-config-service",
        "nodeType": "service"
      },
      {
        "nodeName": "ts-contacts-service",
        "nodeType": "service"
      }
    ],
    "links": [
      {
        "source": "ts-admin-basic-info-service",
        "target": "ts-travel-service",
        "requests": [
          {
            "type": "PUT",
            "uri": "ts-train-service/api/v1/trainservice/trains",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.updateTrip(edu.fudan.common.entity.TravelInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.modifyTrain",
            "parentMethodParameters": [
              "edu.fudan.common.entity.TrainType",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-price-service/api/v1/priceservice/prices",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.queryAll(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.getAllPrices",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "DELETE",
            "uri": "ts-train-service/api/v1/trainservice/trains/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.deleteTrip(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips/{tripId}",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.deleteTrain",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-price-service/api/v1/priceservice/prices",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.createTrip(edu.fudan.common.entity.TravelInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.addPrice",
            "parentMethodParameters": [
              "adminbasic.entity.PriceInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "PUT",
            "uri": "ts-price-service/api/v1/priceservice/prices",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.updateTrip(edu.fudan.common.entity.TravelInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.modifyPrice",
            "parentMethodParameters": [
              "adminbasic.entity.PriceInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-train-service/api/v1/trainservice/trains",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.createTrip(edu.fudan.common.entity.TravelInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.addTrain",
            "parentMethodParameters": [
              "edu.fudan.common.entity.TrainType",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-train-service/api/v1/trainservice/trains",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.queryAll(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.getAllTrains",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-basic-info-service",
        "target": "ts-train-service",
        "requests": [
          {
            "type": "DELETE",
            "uri": "ts-contacts-service/api/v1/contactservice/contacts/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.delete(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.deleteContact",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "DELETE",
            "uri": "ts-station-service/api/v1/stationservice/stations/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.delete(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.deleteStation",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "DELETE",
            "uri": "ts-config-service/api/v1/configservice/configs/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.delete(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.deleteConfig",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-station-service/api/v1/stationservice/stations",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.query(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.getAllStations",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "DELETE",
            "uri": "ts-price-service/api/v1/priceservice/prices/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.delete(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.deletePrice",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "PUT",
            "uri": "ts-station-service/api/v1/stationservice/stations",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.update(train.entity.TrainType, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.modifyStation",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Station",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-basic-info-service",
        "target": "ts-config-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-contacts-service/api/v1/contactservice/contacts/admin",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-config-service/org.springframework.http.HttpEntity config.controller.ConfigController.createConfig(config.entity.Config, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-config-service",
            "targetEndpointUri": "api/v1/configservice/configs",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.addContact",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Contacts",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-contacts-service/api/v1/contactservice/contacts",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-config-service/org.springframework.http.HttpEntity config.controller.ConfigController.queryAll(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-config-service",
            "targetEndpointUri": "api/v1/configservice/configs",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.getAllContacts",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "PUT",
            "uri": "ts-contacts-service/api/v1/contactservice/contacts",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-config-service/org.springframework.http.HttpEntity config.controller.ConfigController.updateConfig(config.entity.Config, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-config-service",
            "targetEndpointUri": "api/v1/configservice/configs",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.modifyContact",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Contacts",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-basic-info-service",
        "target": "ts-consign-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-config-service/api/v1/configservice/configs",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-consign-service/org.springframework.http.HttpEntity consign.controller.ConsignController.insertConsign(consign.entity.Consign, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-consign-service",
            "targetEndpointUri": "/api/v1/consignservice/consigns",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.addConfig",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Config",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          },
          {
            "type": "PUT",
            "uri": "ts-config-service/api/v1/configservice/configs",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-consign-service/org.springframework.http.HttpEntity consign.controller.ConsignController.updateConsign(consign.entity.Consign, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-consign-service",
            "targetEndpointUri": "/api/v1/consignservice/consigns",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.modifyConfig",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Config",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-basic-info-service",
        "target": "ts-seat-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-station-service/api/v1/stationservice/stations",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-seat-service/org.springframework.http.HttpEntity seat.controller.SeatController.create(edu.fudan.common.entity.Seat, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-seat-service",
            "targetEndpointUri": "/api/v1/seatservice/seats",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.addStation",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Station",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-basic-info-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-config-service/api/v1/configservice/configs",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-contacts-service/org.springframework.http.HttpEntity contacts.controller.ContactsController.getAllContacts(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts",
            "isCollection": false,
            "parentMethod": "adminbasic.service.AdminBasicInfoServiceImpl.getAllConfigs",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-basic-info-service",
            "restCallInClassName": "adminbasic.service.AdminBasicInfoServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-order-service",
        "target": "ts-order-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther/admin",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.addcreateNewOrder(order.entity.Order, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order/admin",
            "isCollection": false,
            "parentMethod": "adminorder.service.AdminOrderServiceImpl.addOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Order",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-order-service",
            "restCallInClassName": "adminorder.service.AdminOrderServiceImpl"
          },
          {
            "type": "PUT",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther/admin",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.updateOrder(order.entity.Order, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order/admin",
            "isCollection": false,
            "parentMethod": "adminorder.service.AdminOrderServiceImpl.updateOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Order",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-order-service",
            "restCallInClassName": "adminorder.service.AdminOrderServiceImpl"
          },
          {
            "type": "DELETE",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.deleteOrder(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order/{orderId}",
            "isCollection": false,
            "parentMethod": "adminorder.service.AdminOrderServiceImpl.deleteOrder",
            "parentMethodParameters": [
              "java.lang.String",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-order-service",
            "restCallInClassName": "adminorder.service.AdminOrderServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.findAllOrder(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order",
            "isCollection": false,
            "parentMethod": "adminorder.service.AdminOrderServiceImpl.getAllOrders",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-order-service",
            "restCallInClassName": "adminorder.service.AdminOrderServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-order-service",
        "target": "ts-train-service",
        "requests": [
          {
            "type": "DELETE",
            "uri": "ts-order-service/api/v1/orderservice/order/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.delete(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "adminorder.service.AdminOrderServiceImpl.deleteOrder",
            "parentMethodParameters": [
              "java.lang.String",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-order-service",
            "restCallInClassName": "adminorder.service.AdminOrderServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-order-service",
        "target": "ts-food-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-order-service/api/v1/orderservice/order",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.findAllFoodOrder(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "adminorder.service.AdminOrderServiceImpl.getAllOrders",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-order-service",
            "restCallInClassName": "adminorder.service.AdminOrderServiceImpl"
          },
          {
            "type": "PUT",
            "uri": "ts-order-service/api/v1/orderservice/order/admin",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.updateFoodOrder(foodsearch.entity.FoodOrder, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "adminorder.service.AdminOrderServiceImpl.updateOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Order",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-order-service",
            "restCallInClassName": "adminorder.service.AdminOrderServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-order-service/api/v1/orderservice/order/admin",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.createFoodOrder(foodsearch.entity.FoodOrder, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "adminorder.service.AdminOrderServiceImpl.addOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Order",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-order-service",
            "restCallInClassName": "adminorder.service.AdminOrderServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-route-service",
        "target": "ts-food-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-route-service/api/v1/routeservice/routes",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.findAllFoodOrder(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "adminroute.service.AdminRouteServiceImpl.getAllRoutes",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-route-service",
            "restCallInClassName": "adminroute.service.AdminRouteServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-route-service/api/v1/routeservice/routes",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.createFoodOrder(foodsearch.entity.FoodOrder, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "adminroute.service.AdminRouteServiceImpl.createAndModifyRoute",
            "parentMethodParameters": [
              "edu.fudan.common.entity.RouteInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-route-service",
            "restCallInClassName": "adminroute.service.AdminRouteServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-route-service",
        "target": "ts-train-service",
        "requests": [
          {
            "type": "DELETE",
            "uri": "ts-route-service/api/v1/routeservice/routes/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.delete(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "adminroute.service.AdminRouteServiceImpl.deleteRoute",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-route-service",
            "restCallInClassName": "adminroute.service.AdminRouteServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-route-service",
        "target": "ts-station-food-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-station-service/api/v1/stationservice/stations/idlist",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-station-food-service/org.springframework.http.HttpEntity food.controller.StationFoodController.getFoodStoresByStationNames(java.util.List\u003cjava.lang.String\u003e)",
            "endpointMsName": "ts-station-food-service",
            "targetEndpointUri": "/api/v1/stationfoodservice/stationfoodstores",
            "isCollection": false,
            "parentMethod": "adminroute.service.AdminRouteServiceImpl.checkStationsExists",
            "parentMethodParameters": [
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-route-service",
            "restCallInClassName": "adminroute.service.AdminRouteServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-travel-service",
        "target": "ts-travel-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-train-service/api/v1/trainservice/trains/byName/",
            "requestReturn": "edu.fudan.common.entity.TrainType",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips/{tripId}",
            "isCollection": false,
            "parentMethod": "admintravel.service.AdminTravelServiceImpl.queryTrainTypeByName",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-travel-service",
            "restCallInClassName": "admintravel.service.AdminTravelServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-travel2-service/api/v1/travel2service/admin_trip",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.adminQueryAll(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/admin_trip",
            "isCollection": false,
            "parentMethod": "admintravel.service.AdminTravelServiceImpl.getAllTravels",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-travel-service",
            "restCallInClassName": "admintravel.service.AdminTravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-travel-service",
        "target": "ts-station-food-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-station-service/api/v1/stationservice/stations/idlist",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-station-food-service/org.springframework.http.HttpEntity food.controller.StationFoodController.getFoodStoresByStationNames(java.util.List\u003cjava.lang.String\u003e)",
            "endpointMsName": "ts-station-food-service",
            "targetEndpointUri": "/api/v1/stationfoodservice/stationfoodstores",
            "isCollection": false,
            "parentMethod": "admintravel.service.AdminTravelServiceImpl.checkStationsExists",
            "parentMethodParameters": [
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-travel-service",
            "restCallInClassName": "admintravel.service.AdminTravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-travel-service",
        "target": "ts-travel2-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-travel-service/api/v1/travelservice/admin_trip",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel2-service/org.springframework.http.HttpEntity travel2.controller.Travel2Controller.adminQueryAll(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel2-service",
            "targetEndpointUri": "/api/v1/travel2service/admin_trip",
            "isCollection": false,
            "parentMethod": "admintravel.service.AdminTravelServiceImpl.getAllTravels",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-travel-service",
            "restCallInClassName": "admintravel.service.AdminTravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-travel-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-route-service/api/v1/routeservice/routes/",
            "requestReturn": "edu.fudan.common.entity.Route",
            "endpointFunction": "ts-contacts-service/org.springframework.http.HttpEntity contacts.controller.ContactsController.getAllContacts(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts",
            "isCollection": false,
            "parentMethod": "admintravel.service.AdminTravelServiceImpl.getRouteByRouteId",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-travel-service",
            "restCallInClassName": "admintravel.service.AdminTravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-user-service",
        "target": "ts-user-service",
        "requests": [
          {
            "type": "PUT",
            "uri": "UPDATE USER: ts-user-service/api/v1/userservice/users",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-user-service/org.springframework.http.ResponseEntity user.controller.UserController.updateUser(user.dto.UserDto, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-user-service",
            "targetEndpointUri": "/api/v1/userservice/users",
            "isCollection": false,
            "parentMethod": "adminuser.service.AdminUserServiceImpl.updateUser",
            "parentMethodParameters": [
              "adminuser.dto.UserDto",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-user-service",
            "restCallInClassName": "adminuser.service.AdminUserServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-user-service",
        "target": "ts-order-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-user-service/api/v1/userservice/users/register",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.queryOrdersForRefresh(order.entity.OrderInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order/refresh",
            "isCollection": false,
            "parentMethod": "adminuser.service.AdminUserServiceImpl.addUser",
            "parentMethodParameters": [
              "adminuser.dto.UserDto",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-user-service",
            "restCallInClassName": "adminuser.service.AdminUserServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-user-service",
        "target": "ts-auth-service",
        "requests": [
          {
            "type": "DELETE",
            "uri": "ts-user-service/api/v1/userservice/users/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-auth-service/org.springframework.http.ResponseEntity auth.controller.UserController.deleteUserById(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-auth-service",
            "targetEndpointUri": "/api/v1/users/{userId}",
            "isCollection": false,
            "parentMethod": "adminuser.service.AdminUserServiceImpl.deleteUser",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-user-service",
            "restCallInClassName": "adminuser.service.AdminUserServiceImpl"
          }
        ]
      },
      {
        "source": "ts-admin-user-service",
        "target": "ts-food-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-user-service/api/v1/userservice/users",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.findAllFoodOrder(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "adminuser.service.AdminUserServiceImpl.getAllUsers",
            "parentMethodParameters": [
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-admin-user-service",
            "restCallInClassName": "adminuser.service.AdminUserServiceImpl"
          }
        ]
      },
      {
        "source": "ts-basic-service",
        "target": "ts-travel-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-train-service/api/v1/trainservice/trains/byName/",
            "requestReturn": "edu.fudan.common.entity.TrainType",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips/{tripId}",
            "isCollection": false,
            "parentMethod": "fdse.microservice.service.BasicServiceImpl.queryTrainTypeByName",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-basic-service",
            "restCallInClassName": "fdse.microservice.service.BasicServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-train-service/api/v1/trainservice/trains/byNames",
            "requestReturn": "java.util.List",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.getTripsByRouteId(java.util.ArrayList\u003cjava.lang.String\u003e, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips/routes",
            "isCollection": false,
            "parentMethod": "fdse.microservice.service.BasicServiceImpl.queryTrainTypeByNames",
            "parentMethodParameters": [
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-basic-service",
            "restCallInClassName": "fdse.microservice.service.BasicServiceImpl"
          }
        ]
      },
      {
        "source": "ts-basic-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-route-service/api/v1/routeservice/routes/",
            "requestReturn": "edu.fudan.common.entity.Route",
            "endpointFunction": "ts-contacts-service/org.springframework.http.HttpEntity contacts.controller.ContactsController.getAllContacts(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts",
            "isCollection": false,
            "parentMethod": "fdse.microservice.service.BasicServiceImpl.getRouteByRouteId",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-basic-service",
            "restCallInClassName": "fdse.microservice.service.BasicServiceImpl"
          }
        ]
      },
      {
        "source": "ts-basic-service",
        "target": "ts-train-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-station-service/api/v1/stationservice/stations/id/",
            "requestReturn": "boolean",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "fdse.microservice.service.BasicServiceImpl.checkStationExists",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-basic-service",
            "restCallInClassName": "fdse.microservice.service.BasicServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-station-service/api/v1/stationservice/stations/id/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "fdse.microservice.service.BasicServiceImpl.queryForStationId",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-basic-service",
            "restCallInClassName": "fdse.microservice.service.BasicServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-price-service/api/v1/priceservice/prices//",
            "requestReturn": "edu.fudan.common.entity.PriceConfig",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "fdse.microservice.service.BasicServiceImpl.queryPriceConfigByRouteIdAndTrainType",
            "parentMethodParameters": [
              "java.lang.String",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-basic-service",
            "restCallInClassName": "fdse.microservice.service.BasicServiceImpl"
          }
        ]
      },
      {
        "source": "ts-basic-service",
        "target": "ts-station-food-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-station-service/api/v1/stationservice/stations/idlist",
            "requestReturn": "java.util.Map",
            "endpointFunction": "ts-station-food-service/org.springframework.http.HttpEntity food.controller.StationFoodController.getFoodStoresByStationNames(java.util.List\u003cjava.lang.String\u003e)",
            "endpointMsName": "ts-station-food-service",
            "targetEndpointUri": "/api/v1/stationfoodservice/stationfoodstores",
            "isCollection": false,
            "parentMethod": "fdse.microservice.service.BasicServiceImpl.checkStationsExists",
            "parentMethodParameters": [
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-basic-service",
            "restCallInClassName": "fdse.microservice.service.BasicServiceImpl"
          }
        ]
      },
      {
        "source": "ts-basic-service",
        "target": "ts-price-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-price-service/api/v1/priceservice/prices/byRouteIdsAndTrainTypes",
            "requestReturn": "java.util.Map",
            "endpointFunction": "ts-price-service/org.springframework.http.HttpEntity price.controller.PriceController.query(java.util.List\u003cjava.lang.String\u003e, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-price-service",
            "targetEndpointUri": "/api/v1/priceservice/prices/byRouteIdsAndTrainTypes",
            "isCollection": false,
            "parentMethod": "fdse.microservice.service.BasicServiceImpl.queryPriceConfigByRouteIdsAndTrainTypes",
            "parentMethodParameters": [
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-basic-service",
            "restCallInClassName": "fdse.microservice.service.BasicServiceImpl"
          }
        ]
      },
      {
        "source": "ts-cancel-service",
        "target": "ts-food-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-order-service/api/v1/orderservice/order/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.findAllFoodOrder(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "cancel.service.CancelServiceImpl.getOrderByIdFromOrder",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-cancel-service",
            "restCallInClassName": "cancel.service.CancelServiceImpl"
          },
          {
            "type": "PUT",
            "uri": "ts-order-service/api/v1/orderservice/order",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.updateFoodOrder(foodsearch.entity.FoodOrder, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "cancel.service.CancelServiceImpl.cancelFromOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Order",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-cancel-service",
            "restCallInClassName": "cancel.service.CancelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-cancel-service",
        "target": "ts-admin-user-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-user-service/api/v1/userservice/users/id/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-admin-user-service/org.springframework.http.HttpEntity adminuser.controller.AdminUserController.getAllUsers(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-admin-user-service",
            "targetEndpointUri": "/api/v1/adminuserservice/users",
            "isCollection": false,
            "parentMethod": "cancel.service.CancelServiceImpl.getAccount",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-cancel-service",
            "restCallInClassName": "cancel.service.CancelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-cancel-service",
        "target": "ts-order-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.getOrderById(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order/{orderId}",
            "isCollection": false,
            "parentMethod": "cancel.service.CancelServiceImpl.getOrderByIdFromOrderOther",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-cancel-service",
            "restCallInClassName": "cancel.service.CancelServiceImpl"
          },
          {
            "type": "PUT",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.saveOrderInfo(order.entity.Order, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order",
            "isCollection": false,
            "parentMethod": "cancel.service.CancelServiceImpl.cancelFromOtherOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Order",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-cancel-service",
            "restCallInClassName": "cancel.service.CancelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-execute-service",
        "target": "ts-food-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-order-service/api/v1/orderservice/order/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.findAllFoodOrder(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "execute.serivce.ExecuteServiceImpl.getOrderByIdFromOrder",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-execute-service",
            "restCallInClassName": "execute.serivce.ExecuteServiceImpl"
          }
        ]
      },
      {
        "source": "ts-execute-service",
        "target": "ts-order-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.getOrderById(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order/{orderId}",
            "isCollection": false,
            "parentMethod": "execute.serivce.ExecuteServiceImpl.getOrderByIdFromOrderOther",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-execute-service",
            "restCallInClassName": "execute.serivce.ExecuteServiceImpl"
          }
        ]
      },
      {
        "source": "ts-food-delivery-service",
        "target": "ts-train-food-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-station-food-service/api/v1/stationfoodservice/stationfoodstores/bystoreid/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-food-service/org.springframework.http.HttpEntity trainFood.controller.TrainFoodController.getTrainFoodOfTrip(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-food-service",
            "targetEndpointUri": "/api/v1/trainfoodservice/trainfoods/{tripId}",
            "isCollection": false,
            "parentMethod": "food_delivery.service.FoodDeliveryServiceImpl.createFoodDeliveryOrder",
            "parentMethodParameters": [
              "food_delivery.entity.FoodDeliveryOrder",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-food-delivery-service",
            "restCallInClassName": "food_delivery.service.FoodDeliveryServiceImpl"
          }
        ]
      },
      {
        "source": "ts-food-service",
        "target": "ts-train-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-train-food-service/api/v1/trainfoodservice/trainfoods/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "foodsearch.service.FoodServiceImpl.getAllFood",
            "parentMethodParameters": [
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-food-service",
            "restCallInClassName": "foodsearch.service.FoodServiceImpl"
          }
        ]
      },
      {
        "source": "ts-food-service",
        "target": "ts-station-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-station-food-service/api/v1/stationfoodservice/stationfoodstores",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-station-service/org.springframework.http.ResponseEntity fdse.microservice.controller.StationController.create(fdse.microservice.entity.Station, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-station-service",
            "targetEndpointUri": "/api/v1/stationservice/stations",
            "isCollection": false,
            "parentMethod": "foodsearch.service.FoodServiceImpl.getAllFood",
            "parentMethodParameters": [
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-food-service",
            "restCallInClassName": "foodsearch.service.FoodServiceImpl"
          }
        ]
      },
      {
        "source": "ts-inside-payment-service",
        "target": "ts-price-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-payment-service/api/v1/paymentservice/payment",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-price-service/org.springframework.http.HttpEntity price.controller.PriceController.create(price.entity.PriceConfig, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-price-service",
            "targetEndpointUri": "/api/v1/priceservice/prices",
            "isCollection": false,
            "parentMethod": "inside_payment.service.InsidePaymentServiceImpl.pay",
            "parentMethodParameters": [
              "inside_payment.entity.PaymentInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-inside-payment-service",
            "restCallInClassName": "inside_payment.service.InsidePaymentServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-payment-service/api/v1/paymentservice/payment",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-price-service/org.springframework.http.HttpEntity price.controller.PriceController.create(price.entity.PriceConfig, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-price-service",
            "targetEndpointUri": "/api/v1/priceservice/prices",
            "isCollection": false,
            "parentMethod": "inside_payment.service.InsidePaymentServiceImpl.payDifference",
            "parentMethodParameters": [
              "inside_payment.entity.PaymentInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-inside-payment-service",
            "restCallInClassName": "inside_payment.service.InsidePaymentServiceImpl"
          }
        ]
      },
      {
        "source": "ts-order-other-service",
        "target": "ts-station-food-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-station-service/api/v1/stationservice/stations/namelist",
            "requestReturn": "java.util.List",
            "endpointFunction": "ts-station-food-service/org.springframework.http.HttpEntity food.controller.StationFoodController.getFoodStoresByStationNames(java.util.List\u003cjava.lang.String\u003e)",
            "endpointMsName": "ts-station-food-service",
            "targetEndpointUri": "/api/v1/stationfoodservice/stationfoodstores",
            "isCollection": false,
            "parentMethod": "other.service.OrderOtherServiceImpl.queryForStationId",
            "parentMethodParameters": [
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-order-other-service",
            "restCallInClassName": "other.service.OrderOtherServiceImpl"
          }
        ]
      },
      {
        "source": "ts-order-service",
        "target": "ts-station-food-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-station-service/api/v1/stationservice/stations/namelist",
            "requestReturn": "java.util.List",
            "endpointFunction": "ts-station-food-service/org.springframework.http.HttpEntity food.controller.StationFoodController.getFoodStoresByStationNames(java.util.List\u003cjava.lang.String\u003e)",
            "endpointMsName": "ts-station-food-service",
            "targetEndpointUri": "/api/v1/stationfoodservice/stationfoodstores",
            "isCollection": false,
            "parentMethod": "order.service.OrderServiceImpl.queryForStationId",
            "parentMethodParameters": [
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-order-service",
            "restCallInClassName": "order.service.OrderServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-other-service",
        "target": "ts-config-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-contacts-service/api/v1/contactservice/contacts/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-config-service/org.springframework.http.HttpEntity config.controller.ConfigController.queryAll(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-config-service",
            "targetEndpointUri": "api/v1/configservice/configs",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.getContactsById",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-consign-service/api/v1/consignservice/consigns",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-config-service/org.springframework.http.HttpEntity config.controller.ConfigController.createConfig(config.entity.Config, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-config-service",
            "targetEndpointUri": "api/v1/configservice/configs",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.createConsign",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Consign",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-other-service",
        "target": "ts-train-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-station-service/api/v1/stationservice/stations/id/",
            "requestReturn": "java.lang.String",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.queryForStationId",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-other-service",
        "target": "ts-admin-basic-info-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-basic-service/api/v1/basicservice/basic/travel",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-admin-basic-info-service/org.springframework.http.HttpEntity adminbasic.controller.AdminBasicInfoController.addTrain(edu.fudan.common.entity.TrainType, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-admin-basic-info-service",
            "targetEndpointUri": "/api/v1/adminbasicservice/adminbasic/trains",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.preserve",
            "parentMethodParameters": [
              "edu.fudan.common.entity.OrderTicketsInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-other-service",
        "target": "ts-travel-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-travel2-service/api/v1/travel2service/trip_detail",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.getTripAllDetailInfo(edu.fudan.common.entity.TripAllDetailInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trip_detail",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.getTripAllDetailInformation",
            "parentMethodParameters": [
              "edu.fudan.common.entity.TripAllDetailInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-other-service",
        "target": "ts-order-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.queryOrders(order.entity.OrderInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order/query",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.createOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Order",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-food-service/api/v1/foodservice/orders",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.createNewOrder(order.entity.Order, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.createFoodOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.FoodOrder",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-other-service",
        "target": "ts-route-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-seat-service/api/v1/seatservice/seats",
            "requestReturn": "edu.fudan.common.entity.Ticket",
            "endpointFunction": "ts-route-service/org.springframework.http.ResponseEntity route.controller.RouteController.createAndModifyRoute(route.entity.RouteInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-route-service",
            "targetEndpointUri": "/api/v1/routeservice/routes",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.dipatchSeat",
            "parentMethodParameters": [
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "int",
              "int",
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-other-service",
        "target": "ts-admin-user-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-user-service/api/v1/userservice/users/id/",
            "requestReturn": "edu.fudan.common.entity.User",
            "endpointFunction": "ts-admin-user-service/org.springframework.http.HttpEntity adminuser.controller.AdminUserController.getAllUsers(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-admin-user-service",
            "targetEndpointUri": "/api/v1/adminuserservice/users",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.getAccount",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-other-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-assurance-service/api/v1/assuranceservice/assurances//",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-contacts-service/org.springframework.http.HttpEntity contacts.controller.ContactsController.getContactsByContactsId(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts/{id}",
            "isCollection": false,
            "parentMethod": "preserveOther.service.PreserveOtherServiceImpl.addAssuranceForOrder",
            "parentMethodParameters": [
              "int",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-other-service",
            "restCallInClassName": "preserveOther.service.PreserveOtherServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-assurance-service/api/v1/assuranceservice/assurances//",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-contacts-service/org.springframework.http.HttpEntity contacts.controller.ContactsController.getContactsByContactsId(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts/{id}",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.addAssuranceForOrder",
            "parentMethodParameters": [
              "int",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-service",
        "target": "ts-train-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-station-service/api/v1/stationservice/stations/id/",
            "requestReturn": "java.lang.String",
            "endpointFunction": "ts-train-service/org.springframework.http.HttpEntity train.controller.TrainController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-train-service",
            "targetEndpointUri": "/api/v1/trainservice/trains/{id}",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.queryForStationId",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-service",
        "target": "ts-admin-basic-info-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-basic-service/api/v1/basicservice/basic/travel",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-admin-basic-info-service/org.springframework.http.HttpEntity adminbasic.controller.AdminBasicInfoController.addTrain(edu.fudan.common.entity.TrainType, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-admin-basic-info-service",
            "targetEndpointUri": "/api/v1/adminbasicservice/adminbasic/trains",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.preserve",
            "parentMethodParameters": [
              "edu.fudan.common.entity.OrderTicketsInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-service",
        "target": "ts-route-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-seat-service/api/v1/seatservice/seats",
            "requestReturn": "edu.fudan.common.entity.Ticket",
            "endpointFunction": "ts-route-service/org.springframework.http.ResponseEntity route.controller.RouteController.createAndModifyRoute(route.entity.RouteInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-route-service",
            "targetEndpointUri": "/api/v1/routeservice/routes",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.dipatchSeat",
            "parentMethodParameters": [
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "int",
              "int",
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-service",
        "target": "ts-wait-order-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-order-service/api/v1/orderservice/order",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-wait-order-service/org.springframework.http.HttpEntity waitorder.controller.WaitListOrderController.createNewOrder(waitorder.entity.WaitListOrderVO, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-wait-order-service",
            "targetEndpointUri": "/api/v1/waitorderservice/order",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.createOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Order",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-service",
        "target": "ts-config-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-consign-service/api/v1/consignservice/consigns",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-config-service/org.springframework.http.HttpEntity config.controller.ConfigController.createConfig(config.entity.Config, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-config-service",
            "targetEndpointUri": "api/v1/configservice/configs",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.createConsign",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Consign",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-contacts-service/api/v1/contactservice/contacts/",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-config-service/org.springframework.http.HttpEntity config.controller.ConfigController.queryAll(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-config-service",
            "targetEndpointUri": "api/v1/configservice/configs",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.getContactsById",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-service",
        "target": "ts-order-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-food-service/api/v1/foodservice/orders",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.createNewOrder(order.entity.Order, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.createFoodOrder",
            "parentMethodParameters": [
              "edu.fudan.common.entity.FoodOrder",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-service",
        "target": "ts-travel2-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-travel-service/api/v1/travelservice/trip_detail",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel2-service/org.springframework.http.HttpEntity travel2.controller.Travel2Controller.getTripAllDetailInfo(edu.fudan.common.entity.TripAllDetailInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel2-service",
            "targetEndpointUri": "/api/v1/travel2service/trip_detail",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.getTripAllDetailInformation",
            "parentMethodParameters": [
              "edu.fudan.common.entity.TripAllDetailInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          }
        ]
      },
      {
        "source": "ts-preserve-service",
        "target": "ts-admin-user-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-user-service/api/v1/userservice/users/id/",
            "requestReturn": "edu.fudan.common.entity.User",
            "endpointFunction": "ts-admin-user-service/org.springframework.http.HttpEntity adminuser.controller.AdminUserController.getAllUsers(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-admin-user-service",
            "targetEndpointUri": "/api/v1/adminuserservice/users",
            "isCollection": false,
            "parentMethod": "preserve.service.PreserveServiceImpl.getAccount",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-preserve-service",
            "restCallInClassName": "preserve.service.PreserveServiceImpl"
          }
        ]
      },
      {
        "source": "ts-rebook-service",
        "target": "ts-travel-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-train-service/api/v1/trainservice/trains/byName/",
            "requestReturn": "edu.fudan.common.entity.TrainType",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips/{tripId}",
            "isCollection": false,
            "parentMethod": "rebook.service.RebookServiceImpl.queryTrainTypeByName",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-rebook-service",
            "restCallInClassName": "rebook.service.RebookServiceImpl"
          }
        ]
      },
      {
        "source": "ts-rebook-service",
        "target": "ts-route-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-seat-service/api/v1/seatservice/seats",
            "requestReturn": "edu.fudan.common.entity.Ticket",
            "endpointFunction": "ts-route-service/org.springframework.http.ResponseEntity route.controller.RouteController.createAndModifyRoute(route.entity.RouteInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-route-service",
            "targetEndpointUri": "/api/v1/routeservice/routes",
            "isCollection": false,
            "parentMethod": "rebook.service.RebookServiceImpl.dipatchSeat",
            "parentMethodParameters": [
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "int",
              "int",
              "java.util.List\u003cjava.lang.String\u003e",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-rebook-service",
            "restCallInClassName": "rebook.service.RebookServiceImpl"
          }
        ]
      },
      {
        "source": "ts-rebook-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-route-service/api/v1/routeservice/routes/",
            "requestReturn": "edu.fudan.common.entity.Route",
            "endpointFunction": "ts-contacts-service/org.springframework.http.HttpEntity contacts.controller.ContactsController.getAllContacts(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts",
            "isCollection": false,
            "parentMethod": "rebook.service.RebookServiceImpl.getRouteByRouteId",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-rebook-service",
            "restCallInClassName": "rebook.service.RebookServiceImpl"
          }
        ]
      },
      {
        "source": "ts-route-plan-service",
        "target": "ts-travel2-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-travel-service/api/v1/travelservice/trips/left",
            "requestReturn": "java.util.ArrayList",
            "endpointFunction": "ts-travel2-service/org.springframework.http.HttpEntity travel2.controller.Travel2Controller.queryInfo(edu.fudan.common.entity.TripInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel2-service",
            "targetEndpointUri": "/api/v1/travel2service/trips/left",
            "isCollection": false,
            "parentMethod": "plan.service.RoutePlanServiceImpl.getTripFromHighSpeedTravelServive",
            "parentMethodParameters": [
              "edu.fudan.common.entity.TripInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-route-plan-service",
            "restCallInClassName": "plan.service.RoutePlanServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-travel-service/api/v1/travelservice/trips/routes",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel2-service/org.springframework.http.HttpEntity travel2.controller.Travel2Controller.getTripsByRouteId(java.util.ArrayList\u003cjava.lang.String\u003e, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel2-service",
            "targetEndpointUri": "/api/v1/travel2service/trips/routes",
            "isCollection": false,
            "parentMethod": "plan.service.RoutePlanServiceImpl.searchMinStopStations",
            "parentMethodParameters": [
              "edu.fudan.common.entity.RoutePlanInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-route-plan-service",
            "restCallInClassName": "plan.service.RoutePlanServiceImpl"
          }
        ]
      },
      {
        "source": "ts-route-plan-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-route-service/api/v1/routeservice/routes/",
            "requestReturn": "edu.fudan.common.entity.Route",
            "endpointFunction": "ts-contacts-service/org.springframework.http.HttpEntity contacts.controller.ContactsController.getAllContacts(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts",
            "isCollection": false,
            "parentMethod": "plan.service.RoutePlanServiceImpl.getRouteByRouteId",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-route-plan-service",
            "restCallInClassName": "plan.service.RoutePlanServiceImpl"
          }
        ]
      },
      {
        "source": "ts-route-plan-service",
        "target": "ts-travel-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-travel2-service/api/v1/travel2service/trips/left",
            "requestReturn": "java.util.ArrayList",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.queryInfo(edu.fudan.common.entity.TripInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips/left",
            "isCollection": false,
            "parentMethod": "plan.service.RoutePlanServiceImpl.getTripFromNormalTrainTravelService",
            "parentMethodParameters": [
              "edu.fudan.common.entity.TripInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-route-plan-service",
            "restCallInClassName": "plan.service.RoutePlanServiceImpl"
          },
          {
            "type": "GET",
            "uri": "ts-route-service/api/v1/routeservice/routes//",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.getRouteByTripId(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/routes/{tripId}",
            "isCollection": false,
            "parentMethod": "plan.service.RoutePlanServiceImpl.searchMinStopStations",
            "parentMethodParameters": [
              "edu.fudan.common.entity.RoutePlanInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-route-plan-service",
            "restCallInClassName": "plan.service.RoutePlanServiceImpl"
          }
        ]
      },
      {
        "source": "ts-seat-service",
        "target": "ts-order-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther/tickets",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.getTicketListByDateAndTripId(edu.fudan.common.entity.Seat, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order/tickets",
            "isCollection": false,
            "parentMethod": "seat.service.SeatServiceImpl.distributeSeat",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Seat",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-seat-service",
            "restCallInClassName": "seat.service.SeatServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-order-other-service/api/v1/orderOtherService/orderOther/tickets",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-order-service/org.springframework.http.HttpEntity order.controller.OrderController.getTicketListByDateAndTripId(edu.fudan.common.entity.Seat, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-order-service",
            "targetEndpointUri": "/api/v1/orderservice/order/tickets",
            "isCollection": false,
            "parentMethod": "seat.service.SeatServiceImpl.getLeftTicketOfInterval",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Seat",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-seat-service",
            "restCallInClassName": "seat.service.SeatServiceImpl"
          }
        ]
      },
      {
        "source": "ts-seat-service",
        "target": "ts-food-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-order-service/api/v1/orderservice/order/tickets",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.createFoodOrder(foodsearch.entity.FoodOrder, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "seat.service.SeatServiceImpl.distributeSeat",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Seat",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-seat-service",
            "restCallInClassName": "seat.service.SeatServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-order-service/api/v1/orderservice/order/tickets",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-food-service/org.springframework.http.HttpEntity foodsearch.controller.FoodController.createFoodOrder(foodsearch.entity.FoodOrder, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-food-service",
            "targetEndpointUri": "/api/v1/foodservice/orders",
            "isCollection": false,
            "parentMethod": "seat.service.SeatServiceImpl.getLeftTicketOfInterval",
            "parentMethodParameters": [
              "edu.fudan.common.entity.Seat",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-seat-service",
            "restCallInClassName": "seat.service.SeatServiceImpl"
          }
        ]
      },
      {
        "source": "ts-travel-plan-service",
        "target": "ts-travel-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-train-service/api/v1/trainservice/trains/byName/",
            "requestReturn": "edu.fudan.common.entity.TrainType",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips/{tripId}",
            "isCollection": false,
            "parentMethod": "travelplan.service.TravelPlanServiceImpl.queryTrainTypeByName",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel-plan-service",
            "restCallInClassName": "travelplan.service.TravelPlanServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-travel2-service/api/v1/travel2service/trips/left",
            "requestReturn": "java.util.ArrayList",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.queryInfo(edu.fudan.common.entity.TripInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips/left",
            "isCollection": false,
            "parentMethod": "travelplan.service.TravelPlanServiceImpl.tripsFromNormal",
            "parentMethodParameters": [
              "edu.fudan.common.entity.TripInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel-plan-service",
            "restCallInClassName": "travelplan.service.TravelPlanServiceImpl"
          }
        ]
      },
      {
        "source": "ts-travel-plan-service",
        "target": "ts-travel2-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-travel-service/api/v1/travelservice/trips/left",
            "requestReturn": "java.util.List",
            "endpointFunction": "ts-travel2-service/org.springframework.http.HttpEntity travel2.controller.Travel2Controller.queryInfo(edu.fudan.common.entity.TripInfo, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel2-service",
            "targetEndpointUri": "/api/v1/travel2service/trips/left",
            "isCollection": false,
            "parentMethod": "travelplan.service.TravelPlanServiceImpl.tripsFromHighSpeed",
            "parentMethodParameters": [
              "edu.fudan.common.entity.TripInfo",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel-plan-service",
            "restCallInClassName": "travelplan.service.TravelPlanServiceImpl"
          }
        ]
      },
      {
        "source": "ts-travel-service",
        "target": "ts-admin-basic-info-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-basic-service/api/v1/basicservice/basic/travels",
            "requestReturn": "java.util.List",
            "endpointFunction": "ts-admin-basic-info-service/org.springframework.http.HttpEntity adminbasic.controller.AdminBasicInfoController.addTrain(edu.fudan.common.entity.TrainType, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-admin-basic-info-service",
            "targetEndpointUri": "/api/v1/adminbasicservice/adminbasic/trains",
            "isCollection": false,
            "parentMethod": "travel.service.TravelServiceImpl.getTicketsByBatch",
            "parentMethodParameters": [
              "java.util.List\u003ctravel.entity.Trip\u003e",
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel-service",
            "restCallInClassName": "travel.service.TravelServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-basic-service/api/v1/basicservice/basic/travel",
            "requestReturn": "edu.fudan.common.entity.TripResponse",
            "endpointFunction": "ts-admin-basic-info-service/org.springframework.http.HttpEntity adminbasic.controller.AdminBasicInfoController.addTrain(edu.fudan.common.entity.TrainType, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-admin-basic-info-service",
            "targetEndpointUri": "/api/v1/adminbasicservice/adminbasic/trains",
            "isCollection": false,
            "parentMethod": "travel.service.TravelServiceImpl.getTickets",
            "parentMethodParameters": [
              "travel.entity.Trip",
              "edu.fudan.common.entity.Route",
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel-service",
            "restCallInClassName": "travel.service.TravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-travel-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-route-service/api/v1/routeservice/routes/",
            "requestReturn": "edu.fudan.common.entity.Route",
            "endpointFunction": "ts-contacts-service/org.springframework.http.HttpEntity contacts.controller.ContactsController.getAllContacts(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts",
            "isCollection": false,
            "parentMethod": "travel.service.TravelServiceImpl.getRouteByRouteId",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel-service",
            "restCallInClassName": "travel.service.TravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-travel-service",
        "target": "ts-travel2-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-train-service/api/v1/trainservice/trains/byName/",
            "requestReturn": "edu.fudan.common.entity.TrainType",
            "endpointFunction": "ts-travel2-service/org.springframework.http.HttpEntity travel2.controller.Travel2Controller.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel2-service",
            "targetEndpointUri": "/api/v1/travel2service/trips/{tripId}",
            "isCollection": false,
            "parentMethod": "travel.service.TravelServiceImpl.getTrainTypeByName",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel-service",
            "restCallInClassName": "travel.service.TravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-travel2-service",
        "target": "ts-travel-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-train-service/api/v1/trainservice/trains/byName/",
            "requestReturn": "edu.fudan.common.entity.TrainType",
            "endpointFunction": "ts-travel-service/org.springframework.http.HttpEntity travel.controller.TravelController.retrieve(java.lang.String, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-travel-service",
            "targetEndpointUri": "/api/v1/travelservice/trips/{tripId}",
            "isCollection": false,
            "parentMethod": "travel2.service.TravelServiceImpl.getTrainTypeByName",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel2-service",
            "restCallInClassName": "travel2.service.TravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-travel2-service",
        "target": "ts-admin-basic-info-service",
        "requests": [
          {
            "type": "POST",
            "uri": "ts-basic-service/api/v1/basicservice/basic/travel",
            "requestReturn": "edu.fudan.common.entity.TripResponse",
            "endpointFunction": "ts-admin-basic-info-service/org.springframework.http.HttpEntity adminbasic.controller.AdminBasicInfoController.addTrain(edu.fudan.common.entity.TrainType, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-admin-basic-info-service",
            "targetEndpointUri": "/api/v1/adminbasicservice/adminbasic/trains",
            "isCollection": false,
            "parentMethod": "travel2.service.TravelServiceImpl.getTickets",
            "parentMethodParameters": [
              "travel2.entity.Trip",
              "edu.fudan.common.entity.Route",
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel2-service",
            "restCallInClassName": "travel2.service.TravelServiceImpl"
          },
          {
            "type": "POST",
            "uri": "ts-basic-service/api/v1/basicservice/basic/travels",
            "requestReturn": "java.util.List",
            "endpointFunction": "ts-admin-basic-info-service/org.springframework.http.HttpEntity adminbasic.controller.AdminBasicInfoController.addTrain(edu.fudan.common.entity.TrainType, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-admin-basic-info-service",
            "targetEndpointUri": "/api/v1/adminbasicservice/adminbasic/trains",
            "isCollection": false,
            "parentMethod": "travel2.service.TravelServiceImpl.getTicketsByBatch",
            "parentMethodParameters": [
              "java.util.List\u003ctravel2.entity.Trip\u003e",
              "java.lang.String",
              "java.lang.String",
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel2-service",
            "restCallInClassName": "travel2.service.TravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-travel2-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "GET",
            "uri": "ts-route-service/api/v1/routeservice/routes/",
            "requestReturn": "edu.fudan.common.entity.Route",
            "endpointFunction": "ts-contacts-service/org.springframework.http.HttpEntity contacts.controller.ContactsController.getAllContacts(org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts",
            "isCollection": false,
            "parentMethod": "travel2.service.TravelServiceImpl.getRouteByRouteId",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpHeaders"
            ],
            "msName": "ts-travel2-service",
            "restCallInClassName": "travel2.service.TravelServiceImpl"
          }
        ]
      },
      {
        "source": "ts-wait-order-service",
        "target": "ts-contacts-service",
        "requests": [
          {
            "type": "POST",
            "uri": "/api/v1/contactservice/preserve",
            "requestReturn": "edu.fudan.common.util.Response",
            "endpointFunction": "ts-contacts-service/org.springframework.http.ResponseEntity contacts.controller.ContactsController.createNewContacts(contacts.entity.Contacts, org.springframework.http.HttpHeaders)",
            "endpointMsName": "ts-contacts-service",
            "targetEndpointUri": "api/v1/contactservice/contacts",
            "isCollection": false,
            "parentMethod": "waitorder.utils.PollThread.doPreserve",
            "parentMethodParameters": [
              "java.lang.String",
              "org.springframework.http.HttpEntity"
            ],
            "msName": "ts-wait-order-service",
            "restCallInClassName": "waitorder.utils.PollThread"
          }
        ]
      }
    ]
  }
}